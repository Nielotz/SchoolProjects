% return format:
%   arm1 [at1, at2, at3, ...]
%   arm2 [at1, at2, at3, ...]
function [R_arm_orientation, R_arm_speed_rad, ...
    R_sat_position, R_sat_orientation, ...
    R_ee_position, R_ee_orientation ...
    ] ...
    = dynamic_2DoF_with_free_base(satellite_mass, satellite_inertia, ...
    arm_mass, arm_len, moments, moments_dt, ...
    arm_pos_0, arm_speed_0)

%% Define arrays.
iterations = size(moments, 2);

R_arm_orientation = zeros(2, iterations);
R_arm_speed_rad = zeros(2, iterations);

R_ee_position = zeros(2, iterations);  % [X; Y]
R_ee_orientation = zeros(1, iterations);

R_sat_position = zeros(2, iterations);  % [X; Y]
sat_speed = zeros(2, iterations);  % [X; Y]
R_sat_orientation = zeros(1, iterations);
sat_speed_rad = zeros(1, iterations);

%% Set init conditions.
R_arm_orientation(:, 1) = arm_pos_0;
R_arm_speed_rad(:, 1) = arm_speed_0;

R_sat_position(:, 1) = [0; 0];
sat_speed(:, 1) = [0; 0];
R_sat_orientation(1) = 0;
sat_speed_rad(1) = 0;

[R_ee_position(:, 1), R_ee_orientation(1, 1), lin_speeds, rad_speeds] = ...
    direct_2DoF(arm_pos_0, arm_speed_0, arm_len(1), arm_len(2));

%% Calculate M, C and subs consts.
[M, C] = get_free_float_M_C(...
    0, ...  % p1 - Manipulator mounting point in x axis.
    0, ...  % p2 - Manipulator mounting point in y axis.
    ...
    satellite_mass, ...  % m0 - The mass of the satellite.
    arm_mass(1), ...  % m1 - The mass of the first kinematic pair.
    arm_mass(2), ...  % m2 - The mass of the second kinematic pair.
    ...
    arm_len(1) / 2, ...  % a1 - Center of mass of the first link.
    arm_len(2) / 2, ...  % a2 - Center of mass of the second link.
    ...
    arm_len(1), ...  % L1 - The length of the first link.
    arm_len(2), ...  % L2 - The length of the second link.
    ...
    satellite_inertia, ...  % I0 - Satellite moment of inertia.
    ...  % I1 - Moment of inertia of the first link.
    arm_mass(1) * arm_len(1) * arm_len(1) / 12, ...
    ...  % I2 - Moment of inertia of the second link.
    arm_mass(2) * arm_len(2) * arm_len(2) / 12);

syms x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 
S_M_f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) = M;
S_C_f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) = C;
M_f = matlabFunction(S_M_f);
C_f = matlabFunction(S_C_f);

%% Solve second order dynamic movement differential equation.
% M * q.. + C * q. = u = moment
%
% Substitute q. with z:
%     z = q. = speed
%     z. = M^-1 * (u - C*z) = acceleration
% dzdt = @(u, z, M, C) M \ (u - C*z);

moments_with_satellite = zeros(5, iterations);
moments_with_satellite(4:5, :) = moments;

h = moments_dt;
for i = 1 : iterations - 1
    moment = moments_with_satellite(:, i);
    sat_pos = R_sat_position(:, i);
    sat_speed = sat_speed(:, i);
    sat_orientation = R_sat_orientation(i);
    arm_orientation = R_arm_orientation(:, i);
    arm_speed_rad = R_arm_speed_rad(:, i);

    % s1 = h * F(t,y);
    [sat_position_1, sat_speed_1, sat_orientation_1, sat_speed_rad_1, ...
        arm_orientation_1, arm_speed_rad_1, ...
        ] = calculate_step(...
        h, M_f, C_f, moment, ...
        sat_pos, ...
        sat_speed, ...
        sat_orientation, ...
        sat_speed_rad(i), ...
        arm_orientation, ...
        arm_speed_rad...
        );

    % s2 = h * F(t+h/2, y+s1/2);
    [sat_position_2, sat_speed_2, sat_orientation_2, sat_speed_rad_2, ...
        arm_orientation_2, arm_speed_rad_2, ...
        ] = calculate_step(...
        h, M_f, C_f, moment, ...
        sat_pos + sat_position_1 / 2, ...
        sat_speed + sat_speed_1 / 2, ...
        sat_orientation + sat_orientation_1 / 2, ...
        sat_speed_rad(i) + sat_speed_rad_1 / 2, ...
        arm_orientation + arm_orientation_1 / 2, ...
        arm_speed_rad + arm_speed_rad_1 / 2 ...
        );

    % s3 = h * F(t+h/2, y+s2/2);
    [sat_position_3, sat_speed_3, sat_orientation_3, sat_speed_rad_3, ...
        arm_orientation_3, arm_speed_rad_3, ...
        ] = calculate_step(...
        h, M_f, C_f, moment, ...
        sat_pos + sat_position_2 / 2, ...
        sat_speed + sat_speed_2 / 2, ...
        sat_orientation + sat_orientation_2 / 2, ...
        sat_speed_rad(i) + sat_speed_rad_2 / 2, ...
        arm_orientation + arm_orientation_2 / 2, ...
        arm_speed_rad + arm_speed_rad_2 / 2 ...
        );

    % s4 = h * F(t+h, y+s3);
    [sat_position_4, sat_speed_4, sat_orientation_4, sat_speed_rad_4, ...
        arm_orientation_4, arm_speed_rad_4, ...
        ] = calculate_step(...
        h, M_f, C_f, moment, ...
        sat_pos + sat_position_3 , ...
        sat_speed + sat_speed_3 , ...
        sat_orientation + sat_orientation_3, ...
        sat_speed_rad(i) + sat_speed_rad_3, ...
        arm_orientation + arm_orientation_3, ...
        arm_speed_rad + arm_speed_rad_3  ...
        );

    % s = s + (1 / 6) * (s1 + s4 + (s2+s3)*2)
    R_sat_position(:, i + 1) = sat_pos + (1 / 6) ...
        * (sat_position_1 + sat_position_4 ...
        + (sat_position_2 + sat_position_3) * 2);
    sat_speed(:, i + 1) = sat_speed + (1 / 6) ...
        * (sat_speed_1 + sat_speed_4 ...
        + (sat_speed_2 + sat_speed_3) * 2);
    R_sat_orientation(i + 1) = sat_orientation + (1 / 6) ...
        * (sat_orientation_1 + sat_orientation_4 ...
        + (sat_orientation_2 + sat_orientation_3) * 2);
    sat_speed_rad(i + 1) = sat_speed_rad(i) + (1 / 6) ...
        * (sat_speed_rad_1 + sat_speed_rad_4 ...
        + (sat_speed_rad_2 + sat_speed_rad_3) * 2);
    R_arm_orientation(:, i + 1) = arm_orientation + (1 / 6) ...
        * (arm_orientation_1 + arm_orientation_4 ...
        + (arm_orientation_2 + arm_orientation_3) * 2);
    R_arm_speed_rad(:, i + 1) = arm_speed_rad + (1 / 6) ...
        * (arm_speed_rad_1 + arm_speed_rad_4 ...
        + (arm_speed_rad_2 + arm_speed_rad_3) * 2);

    [R_ee_position(:, i + 1), R_ee_orientation(1, i + 1), ~, ~] = ...
        direct_2DoF( ...
        R_arm_orientation(:, i + 1), ...
        R_arm_speed_rad(:, i + 1), ...
        arm_len(1), arm_len(2));

end
end


% Return format:
%   X(1) = [t1, t2, t3...]
%   X(2) = [t1, t2, t3...]
function [R_sat_position, R_sat_speed, R_sat_orientation, R_sat_speed_rad, ...
    R_arm_orientation, R_arm_speed_rad ...
    ] = calculate_step(...
    h, ...
    M_f, C_f, ...
    Q, ...
    sat_pos, ...  % [X; Y] - positon of the satellite's center of mass [m].
    sat_speed, ...  % [X; Y] of satellite speed [m/sec].
    sat_orientation, ...  % Satellite orientation [rad].
    sat_speed_rad, ...  % Angular velocity of satellite orientation [rad/sec].
    arm_orientation, ...  % [1; 2] Angular position of the joints [rad].
    arm_speed_rad ...  % [1; 2] Angular position of the joints [rad/sec].
    )

R_sat_position = h * sat_speed;
R_sat_orientation = h * sat_speed_rad;
R_arm_orientation = h * arm_speed_rad;

%  x1 X - positon of the satellite's center of mass [m].
%  x2 Y - positon of the satellite's center of mass [m].
%  x3 Satellite orientation [rad].
%  x4 Angular position of the first joint [rad].
%  x5 Angular position of the second joint [rad].
%  x6 X of satellite speed [m/sec].
%  x7 Y of satellite speed [m/sec].
%  x8 Angular velocity of satellite orientation [rad/sec].
%  x9 Angular position of the first joint [rad/sec].
%  x10 Angular position of the second joint [rad/sec].
M = M_f(sat_pos(1), sat_pos(2), ...
        sat_orientation, ...
        arm_orientation(1), arm_orientation(2), ...
        sat_speed(1), sat_speed(2), ...
        sat_speed_rad, ...
        arm_speed_rad(1), arm_speed_rad(2));

Cq = C_f(sat_pos(1), sat_pos(2), ...
        sat_orientation, ...
        arm_orientation(1), arm_orientation(2), ...
        sat_speed(1), sat_speed(2), ...
        sat_speed_rad, ...
        arm_speed_rad(1), arm_speed_rad(2));

q_dot_dot = h * (M \ (Q - Cq));

R_sat_speed = [q_dot_dot(1); ...
    q_dot_dot(2)];
R_sat_speed_rad = q_dot_dot(3);
R_arm_speed_rad = [q_dot_dot(4); ...
    q_dot_dot(5)];
end